import xlrd
import xlwt
import math
import numpy as np
import random
from random import seed
from random import sample

def 3Pm(Y):
  # Y is the list that contains value of calibrated parameters
  # read in the value of calibrated parameters
  # the first 8 parameters are calibrated for both 3P-m and 3P-1 models
  kdeco = Y[0] # optimal reaction rate of decomposition, mgC/L/h
  knitr = Y[1] # optimal reaction rate of nitrification, mgN/L/h
  kdeni = Y[2] # optimal reaction rate of denitrification, mgN/L/h
  kplant = Y[3] # optimal reaction rate of plant uptake, mgN/L/h
  FST = Y[4] # a constant used to estimate optimal reation rates in storage layer. FST = optimal reaction rate in storage layer / optimal reaction rate in soil layer
  pDOM = Y[5] # fraction of organic matters in the soil layer that is dissolved into the liquid phase in each time step
  ROCSP = Y[6] # rate of external organic suppy to the bioretention cell, in unit of mgC/m2/d
  fsed = Y[7] # factor to estimate particulate orfanic matter removal through sedimentation in the forebay
  # the next 4 parameters are only calibrated with 3P-m model
  KMdeco = Y[8] # Michaelis constant of decomposition
  KMnitr = Y[9] # Michaelis constant of nitrification
  KMdeni = Y[10] # Michaelis constant of denitrification
  KMplant = Y[11] # Michaelis constant of plant uptake

  # Start and End are lists of rows that each event starts and ends. These data are used to calculate the event mean concentration of events of interest
  # rows that each event starts / ends are now decided manually by now. 
  
  #define the list of events for calibration
  Clist = [] # required input, define which events are used for calibration
  NC = len(Clist)
  LunLab = [[], [], [], []] # required input, lab-tested EMC of DOC, DON, NOx, and NH4 in underdrain in each sub list
  LbpLab = [[], [], [], []] # required input if bypass EMC is used for calibration, lab-tested EMC of DOC, DON, NOx, and NH4 in bypass water each sub list

  # physical design parameters of the simulated bioretention system
  AreaF = 150 # Surface area of the forebay in unit of m2
  AreaBR = 862 # Surface area of the bioretention cell in unit of m2
  DSMax = 762 # Depth of the bioretention cell soil layer, in unit of mm
  DSTMax = 399 # Depth of the bioretention storage layer, in unit of mm
  FC = 0.25 # field capacity of soil layer
  WP = 0.18 # wilting point of soil layer
  NmaxS = 0.4 # porosity of soil layer
  NmaxST = 0.38 # porosity of storage layer
  CNRrain = 20 # average C:N ratio in the stormwater runoff
  CNRsoil = 15.7 # average C:N ratio in the soil layer
  limit = 0.02 # lab detection limit of NH4-N. When simulated and field tested concentrations are noth below this limit, simulation is considered accurate, and no errors are calculated for NH4-N load.
  Msoil = 862*0.762*1100 # Mass of dry soil in the soil layer in unit of kg, Msoil = area in (m2) * depth of soil in (m) * dry soil density (kg/m3)

  # Set initial conditions, especially initial contents of organic matters and nitrogen species.These values can be estimated from literature if no lab testes resuilts are available. 
  # Further analysis is needed to understand model sensitivity to each initial condition. Previous analysis showed that 3P-m is resilient to slight overestimation of initial DOC and nitrogen species contents. 
  OCS0 = 9070 * Msoil # initial content of total organic carbon in the soil layer in unit of mgC. 
  DOC0 = [0, 0, 7*DSMax*AreaBR*FC, 0] # initial dissolved organic carbon (DOC) in the forebay, pounding layer, soil layer, and storage layer, in unit of mgC. 
  # initial DOC in soil layer = 7 mg/L (average DOC coincentration in underdrain effluent tested from field) * volume of water in soil layer
  # initial content of DOC and N species are set to 0 in forebay, pounding layer, and storage layer as it is assumed that there is no standing water in these layers initially.
  DON0 = [0, 0, DOC0[2]/CNRSoil, 0] # initial Dissolve Organic Nitrogen (DON) content in forebay, pounding layer, soil layer, and storage layer, in unit of mgN
  # initial DON in soil layer is estimated with carbon to nitrogen ratio of the organic matter in soil layer.
  NO30 = [0, 0, DONs[2]*0.29, 0] # initial nitrate-nitrogen (NO3-N) content in the forebay, pounding layer, soil layer, and storage layer, in unit of mgN. 
  # initial NO3-N in soil layer is estimated with a ratio of NO3-N / DON in the underdrain effleunt tested in the lab.
  NH40 = [0, 0, 0, 0] # initial content of ammonia-nitrogen (NH4-N) in the forebay, pounding layer, soil layer, and storage layer in unit of mg N
  # initial content of NH4-N is estimated as 0, according to the aerobic condition in the soil layer when water content is at Field Capacity.

  # define other parameters 
  fs = 0.7 # level of saturation at which denitrification starts in the soil and storage layer
  pgas = 0.01 # percentage of NO3-N converted to N2O during denitrification process. Rough estimate of N2O emission from bioretention system.
  timestep = 1/6 # timestep in unit of hour

  # lists for Event Mean Concentrations (EMCs)  and used for calibration
  Linflow = [[], [], [], []] #list of EMCs of DOC, DON, NO3-N, and NH4-N in bioretention inflow, in unit of mg /L. THIS IS REQUIRED INPUT DATA
  LunField = [[], [], [], []] #list of EMCs of DOC, DON, NO3-N, and NH4-N in the bioretention udnerdrain effluent from field tested dataset, in unit of mg/L. THIS IS REQUIRED INPUT DATA
  LunSim = [[], [], [], []] #list of EMCs of DOC, DON, NO3-N, and NH4-N in the bioretention udnerdrain effluent from model simulated dataset, in unit of mg/L
  # calibration of bypass can be applied but is not required
  LbpField = [[], [], [], []] #list of EMCs of DOC, DON, NO3-N, and NH4-N in the bypass or overflow from field tested dataset, in unit of mg/L. INPUT DATA
  LbpSim = [[], [], [], []] #list of EMCs of DOC, DON, NO3-N, and NH4-N inn the bypass or overflow from model simulated dataset, in unit of mg/L

  # lists used for each event:
  InMass = [0, 0, 0, 0] # Load of DOC, DON, NO3-N, and NH4-N in stormwater inflow of each event, mg
  OutMassUn = [0, 0, 0, 0] # Load of DOC, DON, NO3-N, and NH4-N in bioretention underdrain effluent of each event, mg
  OutMassBP = [0, 0, 0, 0] # Load of DOC, DON, NO3-N, and NH4-N in bypass / overflow of each event, mg
  VT = [0, 0, 0] # total volume of inflow to forebay, bypass / overflow, and underdrain effluent in each event
  
  # read in hydraulics data from xls files
  '''
  This file should contain: (A) time series of flow rates for inflow to forebay, inflow to pounding layer, infiltration from pounding layer to soil layer, 
  percolation from soil layer to storage layer, infiltration from storage layer to deeper underground flow, bioretention underdrain effluen't
  bypass or overflow of bioretention system, evapotransporation; (B) time series of water depth in forebay, water depth in pounding layer,  soil moisture content in soil layer,
  water depth in storage layer; (C) time series of DOC, DON, NO3-N, and NH4-N concentrations in inflow to forebay and / or bioretention pounding layer; in 10 min timestep.
  '''
  path = 'HSheet.xls' # define the workbook that has waterflow time series from SWMM BMP model
  Hbook = xlrd.open_workbook(path)
  Hsheet = Hbook.sheet_by_name('name of worksheet')

  # start simulation
  row = 3 # first row of record readed for simulation
  EventNo = 0 # record of which event is calibrated

  while row < 10000: # define the number of records used for simulation
    DF = float(Hsheet.cell(row, column1).value) # water depth in forebay in unit of mm. define value for column1. Use unit convertion when neccessary.
    DFn = float(Hsheet.cell（row+1, column1).value) # water depth in forebay at the next time step, in unit of mm. Use unit convertion when neccessary.
    inflowT = float(Hsheet.cell(row,4).value)*4.546/60 # inflow rate to forebay, SWMM reported total inflow of storage unit, converted to LPS
    bypass = float(Hsheet.cell(row,5).value)*4.546/60 # bypass, SWMM reported flooding of storage unit, converted to LPS
    DP = float(Hsheet.cell(row,6).value)*25.4 # water depth in the BR pounding layer, surface Level in SWMM BR report, mm
    DPn = float(Hsheet.cell(row+1, 6).value)*25.4 # water depth in pounding layer at the next time step, mm
    DST = float(Hsheet.cell(row, 7).value)*25.4 # depth in BR storage layer, Storage Level in SWMM BR report, mm
    DSTn = float(Hsheet.cell(row+1, 7).value)*25.4 # water depth in forebay at the next time step
    theta = float(Hsheet.cell(row, 8).value) # moisture content in BR soil layer, Soil Moisture Content in SWMM BR report, unitless
    thetan = float(Hsheet.cell(row+1, 8).value) # moisture content in soil layer for the next time step, unitless
    sat = theta/nmax # saturation rate of BR soil layer, unitless
    inflowBR = float(Hsheet.cell(row,9).value)*25.4 # inflow to BR, total inflow in SWMM BR report, mm/h
    infil = float(Hsheet.cell(row,10).value)*25.4 # surface infiltration to BR soil layer, surface infiltration in SWMM BR report, mm/h
    SP = float(Hsheet.cell(row,11).value)*25.4 # water flow from soil layer to storage layer, Soil Percolation in SWMM BR report, mm/h
    seepageBR = float(Hsheet.cell(row,12).value)*25.4 # seepage into groundwater from BR, seepage in SWMM BR report, mm/h
    underdrain = float(Hsheet.cell(row,13).value)*25.4 # underdrain effluent, Drain Outflow drom SWMM BR report, mm/h
    EVT = float(Hsheet.cell(row,14).value)*25.4 # evapotranporation rate for both forebay and BR, Total Evap in SWMM BR report, mm、 (10 min time step)
    # we now have time series
    NO3in = Hsheet.cell(row, 15).value #NO3 concentration in forebay inflow, mg N/L
    DONin = Hsheet.cell(row, 17).value # DON concentration in forebay inflow, mg N/L
    DOCin = Hsheet.cell(row, 16).value # DOC concentration inforebay inflow, mg C/L
    T = Hsheet.cell(row, 18).value # air temporature in degree C

    # calculate organic carbon supply as a function of temporature. In this case, assume that OCSP start at 0 degree C and increases with T. 
    if T >0:
        OCSP = (pOCSP/24/6)*(T**0.5) #OCSP in the unit of mgC/10 min, for the entire BR, do not need to multiply bioretention area, or time step
    else:
        OCSP = 0
    # calculate fsat and ftem
    ftem = 0.1 + 0.9*T/(T + math.exp(9.93- 0.312*T))
    # in pounding layer and forebay, denitrification does not happen, other reactions at constant rates
    # in soil layer, fsat for denitrification:
    if sat >= 0.7:
        fsatdeni = (sat-0.7)/(1-0.7)
    else:
        fsatdeni = 0
    # in soil layer, for other reactions, optimal condition is at FC
    if theta >= FC:
        fsatother = (nmax-theta)/(nmax-FC)
    elif theta >= WP:
        fsatother = (theta - WP)/(FC-WP)
    else:
        fsatother = 0
    # in the storage layer, use DST/DSTMax to represent saturation rate:
    if DST / DSTMax >= 0.7:
        fstdeni = (DST/DSTMax-0.7) / (1-0.7)
        fstother = 0
    else:
        fstdeni = 0
        fstother = 1

    # Calculation Part A: forebay
    # biochemical reaction only happens when there is water pounding, and when DF = 0, all mass pools go to 0
    # when there is no inflow, mass of N and C species remain the same
    # Then we assume aerobic conditions when there is inflow happening, and anoxic condition when inflow does not happen
    if DF >0:
      # mass balance after inflow
      DOCF = DOC0[0] + inflowT * 600 * DOCin  # total pool of OC in the forebay
      DONF = DON0[0] + inflowT * 600 * DONin  # mgN
      NO3F = NO30[0] + inflowT * 600 * NO3in  # mgN
      NH4F = NH40[0]
      VF0 = DF * AreaF + inflowT * 600

      # calculate initial concentrations at beginning of time step
      COCF0 = DOCF / VF0 # initial OC concentration mgC/L
      CONF0 = DONF / VF0
      CNH4F0 = NH4F / VF0
      CNO3F0 = NO3F / VF0

      # calculate effluent concentrations
      if CON0[0]>0 and COC0[0] >0:
          CNRF = COC0[0] / CON0[0]
      else:
          CNRF = CNRrain

      # no biochemical reactions, only DOC and DON sedimentation
      if inflowBR >0:
          RsedC = COCF0 *2/(1+ math.exp(inflowT*psed))
          RsedN = RsedC / CNRF
          RsedNO3 = CNO3F0 * 2/(1+math.exp(inflowT *pNO3))
      else:
          RsedC = 0
          RsedN = 0
          RsedNO3 = 0

      # calculate mass balance after sedimentation
      DOCF = DOCF - RsedC * VF0
      DONF = DONF - RsedC * VF0 / CNRF
      NO3F = NO3F - RsedNO3 * VF0

      # then calculate concentrations
      COCF = DOCF / VF0
      CONF = DONF / VF0
      CNH4F = NH4F / VF0
      CNO3F = NO3F / VF0

      # then calculate mass balance after effluent
      WLF = inflowT * 600 - AreaF * (DFn - DF)
      DOC0[0] = DOCF - COCF * WLF
      DON0[0] = DONF - CONF * WLF
      NH40[0] = NH4F - CNH4F * WLF
      NO30[0] = NO3F - CNO3F * WLF

    else:
      # if there is no depth, there should be no water flowing out, but just in case negative value would appear
      COCF = DOCin
      CONF = DONin
      COCF0 = DOCin
      CONF0 = DONin
      CNH4F = 0
      CNO3F = NO3in
      DOC0[0] = 0
      DON0[0] = 0
      NH40[0] = 0
      NO30[0] = 0

    # calculate biochemical reaction rates in pounding layers.
    # assume aerobic conditions when inflow happens, anoxic conditions when no inflow happens
    if DP >0:
      # mass balance after inflow to BR pounding
      DOCP = DOCP0 + COCF * inflowBR * AreaBR * timestep
      DONP = DONP0 + CONF * inflowBR * AreaBR * timestep
      NH4P = NH4P0 + CNH4F * inflowBR * AreaBR * timestep
      NO3P = NO3P0 + CNO3F * inflowBR * AreaBR * timestep
      VP0 = AreaBR * DP + inflowBR * AreaBR * timestep

      # calculate initial concentrations in BR pounding layer
      COCP = DOCP / VP0
      CONP = DONP / VP0
      CNO3P = NO3P / VP0
      CNH4P = NH4P / VP0

      # calculate mass balance after effluent
      DOCP0 = DOCP - COCP * (inflowBR * AreaBR * timestep- AreaBR * (DPn - DP))
      DONP0 = DONP - CONP * (inflowBR * AreaBR * timestep- AreaBR * (DPn - DP))
      NH4P0 = NH4P - CNH4P * (inflowBR * AreaBR * timestep- AreaBR * (DPn - DP))
      NO3P0 = NO3P - CNO3P * (inflowBR * AreaBR * timestep- AreaBR * (DPn - DP))

    else:
      COCP = COCF
      CONP = CONF
      CNO3P = CNH4F
      CNH4P = CNO3F
      DOCP0 = 0
      DONP0 = 0
      NH4P0 = 0
      NO3P0 = 0

    # mass balance after infiltration to soil layer
    # note according to SWMM handbook, all flow rates in unit of length/time uses surface area as a reference. Don't need to time porosity when calculating mass balances
    if infil >0:
      OCS = OCS0 - OCS0 * pDOM # right after inflow, a portion of OC dissolved into liquid phase
      DOCS = DOCS0 + COCP * infil * AreaBR * timestep + OCS0 * pDOM
      DONS = DONS0 + CONP * infil * AreaBR * timestep + OCS0 * pDOM / CNRsoil  # original DON+ inflow DON + newly dissolved ON as a fraction of newly dissolved OC
    else:
      OCS = OCS0
      DOCS = DOCS0
      DONS = DONS0
    NH4S = NH4S0 + CNH4P * infil * AreaBR * timestep
    NO3S = NO3S0 + CNO3P * infil * AreaBR* timestep

    # calculate concentrations.
    Vwater = AreaBR * DSMax * theta + infil * AreaBR * timestep
    COCS0 = DOCS / Vwater
    CONS0 = DONS/ Vwater
    CNH4S0 = NH4S / Vwater
    CNO3S0 = NO3S / Vwater

    # calculate biochemical reaction rates, with fsatdeni and fsatother
    RdecoS = COCS0 * kdeco * ftem * fsatother * timestep / (KMdeco + COCS0)
    RnitrS = CNH4S0 * knitr * ftem * fsatother * timestep / (KMnitr + CNH4S0)
    RdeniS = CNO3S0 * kdeni * ftem * fsatdeni * timestep / (KMdeni + CNO3S0)
    RimmoNH4S = CNH4S0 * kimmo * ftem * fsatother * timestep / (KMimmo + CNH4S0)
    RimmoNO3S = CNO3S0 * kimmo * ftem * fsatother * timestep / (KMimmo + CNO3S0)

    # immobolization goes to 0 when total consumed amount exceeds available amount
    if CNH4S0<(RnitrS + RimmoNH4S):
      if CNH4S0 < RnitrS:
        RnitrS = CNH4S0
        RimmoNH4S = 0
      else:
        RimmoNH4S = CNH4S0-RnitrS

    if CNO3S0<(RdeniS + RimmoNO3S):
      if CNO3S0< RdeniS:
        RdeniS = CNO3S0
        RimmoNO3S = 0
      else:
        RimmoNO3S = CNO3S0 - RdeniS

    # calculate final concentration at end of biochemical reactions
    if CONS0 > 0 and COCS0 >0:
      CNRS = COCS0 / CONS0
    else:
      CNRS = CNRrain

    # mass balance after biochemical reactions
    DOCS = DOCS - RdecoS * Vwater
    DONS = DONS - RdecoS * Vwater / CNRS
    NH4S = NH4S + (RdecoS / CNRS - RnitrS - RimmoNH4S) * Vwater
    NO3S = NO3S + (RnitrS * (1 - pgas) - RdeniS - RimmoNO3S) * Vwater
    # effluent concentration
    COCS = DOCS / Vwater
    CONS = DONS / Vwater
    CNH4S = NH4S / Vwater
    CNO3S = NO3S / Vwater

    # mass balance after effluent
    # water loss in soil layer, Soil percolation + evaporation
    WLS = infil * AreaBR * timestep - (thetan - theta) * AreaBR * DSMax
    OCS0 = OCS + OCSP
    if WLS == EVT:
      DOCS0 = DOCS
      DONS0 = DONS
      NH4S0 = NH4S
      NO3S0 = NO3S
    else:
      DOCS0 = DOCS - COCS * WLS
      DONS0 = DONS - CONS * WLS
      NH4S0 = NH4S - CNH4S * WLS
      NO3S0 = NO3S - CNO3S * WLS

    # calculate initial concentration for biochemical reactions
    if DST >0:
      # mass balance of storage layer after soil percolation
      DOCST = DOCST0 + COCS * SP * AreaBR * timestep
      DONST = DONST0 + CONS * SP * AreaBR * timestep
      NH4ST = NH4ST0 + CNH4S * SP * AreaBR * timestep
      NO3ST = NO3ST0 + CNO3S * SP * AreaBR * timestep

      VST0 = AreaBR * nmaxST * DST + SP * AreaBR * timestep

      COCST0 = DOCST / VST0
      CONST0 = DONST / VST0
      CNH4ST0 = NH4ST / VST0
      CNO3ST0 = NO3ST / VST0

      # calculate biochemical reaction rate, assume aerobic condition when inflow happens, anoxic condition when inflow stops
      RimmoNH4ST = CNH4ST0 * kimmo * FST * ftem * fstother * timestep / (KMimmo + CNH4ST0)
      RimmoNO3ST = CNO3ST0 * kimmo * FST * ftem * fstother * timestep / (KMimmo + CNO3ST0)
      RdecoST = COCST0 * kdeco * FST * fstother * ftem * timestep / (KMdeco + COCST0)
      RnitrST = CNH4ST0 * knitr * FST * fstother * ftem * timestep / (KMdeco + CNH4ST0)
      RdeniST = CNO3ST0 * kdeni * FST * fstdeni * ftem * timestep / (KMdeco + CNO3ST0)

      if CNH4ST0 < (RimmoNH4ST + RnitrST):
        if CNH4ST0 < RnitrST:
          RnitrST = CNH4ST0
          RimmoNH4ST = 0
        else:
          RimmoNH4ST = CNH4ST0 - RnitrST

      if CNO3ST0<(RimmoNO3ST + RdeniST):
        if CNO3ST0 < RdeniST:
          RdeniST = CNO3ST0
          RimmoNO3ST = 0
        else:
          RimmoNO3ST = CNO3ST0 - RdeniST

      # concentrations after biochemical reactions
      # CONST0 may equal to 0
      if CONST0 > 0 and COCST0 >0:
        CNRST = COCST0 / CONST0
      else:
        CNRST = CNRrain

      # mass balance after biochemical reaction
      DOCST = DOCST - RdecoST * VST0
      DONST = DONST - RdecoST * VST0/ CNRST
      NH4ST = NH4ST + (RdecoST / CNRST - RimmoNH4ST - RnitrST) * VST0
      NO3ST = NO3ST + (RnitrST * (1 - pgas) - RimmoNO3ST - RdeniST) * VST0

      # calculate effluent concentration
      COCST = DOCST / VST0
      CONST = DONST / VST0
      CNH4ST = NH4ST / VST0
      CNO3ST = NO3ST / VST0

      # mass balance after effluent
      # water loss in storage layer = underdrain + seepage
      WLST = SP * AreaBR * timestep - AreaBR * nmaxST * (DSTn - DST)
      DOCST0 = DOCST - COCST * WLST
      DONST0 = DONST - CONST * WLST
      NH4ST0 = NH4ST - CNH4ST * WLST
      NO3ST0 = NO3ST - CNO3ST * WLST

    else:
      COCST = COCS
      CONST = CONS
      CNH4ST = CNH4S
      CNO3ST = CNO3S
      DOCST0 = 0
      DONST0 = 0
      NH4ST0 = 0
      NO3ST0 = 0

    # check if any pools or concentrations are negative
    plist = [DOCF0, DONF0, NH4F0, NO3F0, COCF0, CONF0, COCF, CONF, CNH4F, CNO3F, DOCP0, DONP0, NH4P0, NO3P0, COCP, CONP, CNH4P, CNO3P,
             DOCS0, DONS0, NH4S0, NO3S0, COCS, CONS, CNH4S, CNO3S, DOCST0, DONST0, NH4ST0, NO3ST0, COCST, CONST, CNH4ST, CNO3ST]
    ecount = 0
    for element in plist:
      if element <0:
        print('%d event, time %f, first negative element is # %d' %(EventNo, EH, ecount))
        NErr =NErr - element
        ecount +=1
      else:
        ecount +=1

    # calcualte event mean concentrations at end of each event
    if EH >= Start[EventNo] and EH < End[EventNo]:
            OutMassUD[0] += COCST * underdrain *AreaBR *timestep # in unit of mgC
            OutMassUD[1] += CONST * underdrain *AreaBR *timestep
            OutMassUD[2] += CNH4ST * underdrain *AreaBR *timestep
            OutMassUD[3] += CNO3ST * underdrain *AreaBR *timestep
            OutMassBP[0] += COCF * bypass * 600
            OutMassBP[1] += CONF * bypass * 600
            OutMassBP[2] += CNH4F * bypass * 600
            OutMassBP[3] += CNO3F * bypass * 600
            InMass[0] += DOCin * inflowT * 600
            InMass[1] += DONin * inflowT * 600
            InMass[2] += 0
            InMass[3] += NO3in * inflowT * 600
            VTin += inflowT * 600
            VTun += underdrain * AreaBR * timestep # in unit of L
            VTbp += bypass * 600 # in unit of L

        elif EH == End[EventNo]:
            print('end of event %d' %EventNo)
            LunSim[0].append(OutMassUD[0] / VTun)
            LunSim[1].append(OutMassUD[1] / VTun)
            LunSim[2].append(OutMassUD[3] / VTun)
            LunSim[3].append(OutMassUD[2] / VTun)

            LbpSim[0].append(OutMassBP[0] / VTbp)
            LbpSim[1].append(OutMassBP[1] / VTbp)
            LbpSim[2].append(OutMassBP[3] / VTbp)
            LbpSim[3].append(OutMassBP[2] / VTbp)

            LDOCinsim.append(InMass[0] / VTin)
            LDONinsim.append(InMass[1] / VTin)
            LNOxinsim.append(InMass[3] / VTin)

            VTun = 0
            VTbp = 0
            VTin = 0
            InMass = [0,0,0,0]
            OutMassUD = [0,0,0,0]
            OutMassBP = [0,0,0,0]

            EventNo +=1
        row +=1
        TimeCount +=1

    # calculate sum of square of the scaled error of DOC, DON, NO3, NH4 in underdrian effelunt and bypass
    seDOCun = []
    seDONun = []
    seNH4un = []
    seNO3un = []
    seDOCbp = []
    seDONbp = []
    seNH4bp = []
    seNO3bp = []
    SCon = [0, 0, 0, 0, 0, 0]
    NClist = [0, 0, 0, 0, 0, 0]
    for EventCalib in Clist:
        if LunLab[0][EventCalib] >0:
            SCon[0] += LunLab[EventCalib]
            seDOCun,append((LunSim[0][EventCalib] - LunLab[0)[EventCalib])**2)
